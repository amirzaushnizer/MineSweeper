{"version":3,"sources":["store/store-types.ts","components/BombsCounter.tsx","constants.ts","utils.ts","store/actions/index.ts","components/Timer.tsx","components/Square.tsx","components/Game.tsx","App.tsx","store/reducers/index.ts","index.tsx"],"names":["GamePhase","connector","connect","state","numOfBombsLeft","bombsLeft","props","GAME_SIZE","ActionTypes","initOpenSquaresMatrix","size","Array","fill","map","initBooleanMatrix","isIlegalBombLocation","bombsMatrix","row","col","userClickLocation","isUserClickLocation","initBombsMatrix","gameSize","numOfBombs","rowFirstClick","colFirstClick","i","bombInit","Math","floor","random","column","getSquareNeighbors","gridSize","neighbors","j","push","zeroPadNumber","n","output","toString","length","secondsToTimestamp","seconds","sec","minutes","hours","openSquare","newMatrix","bombsSquaresMat","calcNumOfAdjacentBombs","forEach","neighbor","filter","isGameOver","gamePhase","Win","Lose","Timer","interval","setTimeout","incSeconds","setState","intervalId","setInterval","this","Playing","clearInterval","Component","MarkStates","openSquares","dispatch","getState","openSquaresCopy","arr","slice","bombsSquares","type","OpenSquares","payload","flat","square","isWin","WinGame","Square","markState","Unmarked","displayOpen","isBomb","numOfAdjacentBombs","displayHidden","Marked","QuestionMark","handleRightClick","e","mark","unmark","preventDefault","isOpen","handleOpen","lose","handleLeftClick","firstMove","loc","FirstClick","shouldDisplayOpen","buildSquareClassNameString","classNames","open","bomb","prevProps","className","onContextMenu","disabled","onClick","ownProps","UnmarkSquare","MarkSquare","FirstMove","LoseGame","from","keys","App","combineReducers","action","ReactDOM","render","StrictMode","store","createStore","reducers","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.596262d4.chunk.js","sourcesContent":["export enum GamePhase {\n  FirstClick = 0,\n  Playing = 1,\n  Win = 2,\n  Lose = 3,\n}\n\nexport interface RootState {\n  bombsLeft: number;\n  gameSize: number;\n  bombsSquares: boolean[][];\n  openSquares: number[][];\n  gamePhase: GamePhase;\n}\n","import { RootState } from \"../store/store-types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport React from \"react\";\n\ntype BombsCounterProps = ConnectedProps<typeof connector>;\n\nconst BombsCounter: React.FC<BombsCounterProps> = (props) => {\n  return (\n    <div>\n      <h3>Bombs Left</h3>\n      <h5>{props.numOfBombsLeft}</h5>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  numOfBombsLeft: state.bombsLeft,\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(BombsCounter);\n","export const GAME_SIZE = 20;\nexport const NUM_OF_BOMBS = 15;\n","import { NUM_OF_BOMBS } from \"./constants\";\nimport { GamePhase } from \"./store/store-types\";\n\nexport const initOpenSquaresMatrix = (size: number) => {\n  return Array(size)\n    .fill(-1)\n    .map(() => {\n      return Array(size).fill(-1);\n    });\n};\n\nexport const initBooleanMatrix = (size: number) => {\n  return Array(size)\n    .fill(false)\n    .map(() => {\n      return Array(size).fill(false);\n    });\n};\nexport const isUserClickLocation = (\n  userClickLocation: number[],\n  row: number,\n  col: number\n) => {\n  return row === userClickLocation[0] && col === userClickLocation[1];\n};\nexport const isIlegalBombLocation = (\n  bombsMatrix: boolean[][],\n  row: number,\n  col: number,\n  userClickLocation: number[]\n) => {\n  return (\n    bombsMatrix[row][col] || isUserClickLocation(userClickLocation, row, col)\n  );\n};\n\nexport const initBombsMatrix = (\n  gameSize: number,\n  numOfBombs: number,\n  rowFirstClick: number,\n  colFirstClick: number\n) => {\n  const bombsMatrix = initBooleanMatrix(gameSize);\n  for (let i = 0; i < numOfBombs; i++) {\n    let bombInit = false;\n    while (!bombInit) {\n      const row = Math.floor(Math.random() * gameSize);\n      const column = Math.floor(Math.random() * gameSize);\n      if (\n        !isIlegalBombLocation(bombsMatrix, row, column, [\n          rowFirstClick,\n          colFirstClick,\n        ])\n      ) {\n        bombsMatrix[row][column] = true;\n        bombInit = true;\n      }\n    }\n  }\n\n  return bombsMatrix;\n};\n\n//fun with indexes\nexport const getSquareNeighbors = (\n  row: number,\n  col: number,\n  gridSize: number\n) => {\n  const neighbors: number[][] = [];\n  for (let i = row - 1; i <= row + 1; i++) {\n    for (let j = col - 1; j <= col + 1; j++) {\n      if (!(i === row && j === col)) {\n        if (i > -1 && j > -1 && i < gridSize && j < gridSize) {\n          neighbors.push([i, j]);\n        }\n      }\n    }\n  }\n\n  return neighbors;\n};\n\nexport const zeroPadNumber = (n: number) => {\n  let output = n.toString();\n  if (output.length < 2) {\n    output = \"0\" + output;\n  }\n  return output;\n};\n\nexport const secondsToTimestamp = (seconds: number) => {\n  const sec = seconds % 60;\n  const minutes = Math.floor(seconds / 60) % 60;\n  const hours = Math.floor(minutes / 60) % 24;\n  return `${zeroPadNumber(hours)}:${zeroPadNumber(minutes)}:${zeroPadNumber(\n    sec\n  )}`;\n};\n\nexport const openSquare = (\n  row: number,\n  col: number,\n  newMatrix: number[][],\n  bombsSquaresMat: boolean[][]\n) => {\n  if (newMatrix[row][col] < 0) {\n    // if current square not open\n    newMatrix[row][col] = calcNumOfAdjacentBombs(row, col, bombsSquaresMat);\n\n    if (newMatrix[row][col] === 0) {\n      // if all neighbors are clear, open them recursively\n      const neighbors = getSquareNeighbors(row, col, newMatrix.length);\n      neighbors.forEach((neighbor) => {\n        openSquare(neighbor[0], neighbor[1], newMatrix, bombsSquaresMat);\n      });\n    }\n  }\n};\n\nexport const calcNumOfAdjacentBombs = (\n  row: number,\n  col: number,\n  bombsSquaresMat: boolean[][]\n): number => {\n  const neighbors = getSquareNeighbors(row, col, bombsSquaresMat.length);\n  return neighbors.filter(\n    (neighbor) => bombsSquaresMat[neighbor[0]][neighbor[1]]\n  ).length;\n};\n\nexport const isGameOver = (gamePhase: GamePhase) => {\n  return gamePhase === GamePhase.Win || gamePhase === GamePhase.Lose;\n};\n\nexport const isWin = (openSquares: number[][]) =>\n  openSquares.flat().filter((square) => square === -1).length === NUM_OF_BOMBS;\n","import { Dispatch } from \"redux\";\nimport { RootState } from \"../store-types\";\nimport { isWin, openSquare } from \"../../utils\";\n\nexport enum ActionTypes {\n  MarkSquare = \"MARK_SQUARE\",\n  UnmarkSquare = \"UNMARK_SQUARE\",\n  FirstMove = \"FIRST_MOVE\",\n  OpenSquares = \"OPEN_SQUARES\",\n  LoseGame = \"LOSE_GAME\",\n  WinGame = \"WIN_GAME\",\n}\n\ntype GetState = () => RootState;\n\nexport interface MarkAction {\n  type: ActionTypes;\n}\n\nexport interface GamePhaseAction {\n  type: ActionTypes;\n}\n\nexport interface FirstMoveAction {\n  type: ActionTypes;\n  payload: {\n    row: number;\n    col: number;\n  };\n}\n\nexport interface OpenSquaresAction {\n  type: ActionTypes;\n  payload: {\n    openSquares: number[][];\n  };\n}\n\nexport const markSquare = () => {\n  return {\n    type: ActionTypes.MarkSquare,\n  };\n};\n\nexport const unMarkSquare = () => {\n  return {\n    type: ActionTypes.UnmarkSquare,\n  };\n};\n\nexport const firstMove = (row: number, col: number) => {\n  return {\n    type: ActionTypes.FirstMove,\n    payload: {\n      row,\n      col,\n    },\n  };\n};\n\nexport const loseGame = () => {\n  return {\n    type: ActionTypes.LoseGame,\n  };\n};\n\nexport const openSquares = (row: number, col: number) => {\n  return (dispatch: Dispatch, getState: GetState) => {\n    const state = getState();\n    const openSquaresCopy = state.openSquares.map((arr) => arr.slice());\n    openSquare(row, col, openSquaresCopy, state.bombsSquares);\n\n    dispatch({\n      type: ActionTypes.OpenSquares,\n      payload: {\n        openSquares: openSquaresCopy,\n      },\n    });\n\n    if (isWin(openSquaresCopy)) {\n      dispatch({\n        type: ActionTypes.WinGame,\n      });\n    }\n  };\n};\n","import React, { Component } from \"react\";\nimport { secondsToTimestamp } from \"../utils\";\nimport { GamePhase, RootState } from \"../store/store-types\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\ntype TimerProps = ConnectedProps<typeof connector>;\n\ninterface TimerState {\n  seconds: number;\n  interval: NodeJS.Timeout;\n}\n\nclass Timer extends Component<TimerProps, TimerState> {\n  state = {\n    seconds: 0,\n    interval: setTimeout(() => {}, 0),\n  };\n\n  componentDidMount() {\n    const intervalId = setInterval(this.incSeconds, 1000);\n    this.setState({ interval: intervalId });\n  }\n\n  componentDidUpdate() {\n    const { gamePhase } = this.props;\n    const { interval } = this.state;\n    if (gamePhase > GamePhase.Playing) {\n      clearInterval(interval);\n    }\n  }\n\n  componentWillUnmount() {\n    const { interval } = this.state;\n    clearInterval(interval);\n  }\n\n  incSeconds = () => {\n    const { seconds } = this.state;\n    this.setState({ seconds: seconds + 1 });\n  };\n\n  render() {\n    const { seconds } = this.state;\n    return (\n      <div>\n        <h3>Time passed</h3>\n        <h5>{secondsToTimestamp(seconds)}</h5>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  gamePhase: state.gamePhase,\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(Timer);\n","import React, { Component } from \"react\";\n\nimport classNames from \"classnames\";\nimport { GamePhase, RootState } from \"../store/store-types\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport {\n  firstMove,\n  loseGame,\n  markSquare,\n  openSquares,\n  unMarkSquare,\n} from \"../store/actions\";\nimport { isGameOver } from \"../utils\";\n\ninterface OwnProps {\n  loc: number[];\n}\n\ntype ReduxSquareProps = ConnectedProps<typeof connector>;\n\ntype SquareProps = OwnProps & ReduxSquareProps;\n\ninterface SquareState {\n  markState: MarkStates;\n}\n\nenum MarkStates {\n  Unmarked = 0,\n  Marked = 1,\n  QuestionMark = 2,\n}\n\nclass Square extends Component<SquareProps, SquareState> {\n  state = { markState: MarkStates.Unmarked };\n\n  componentDidUpdate(prevProps: Readonly<SquareProps>) {\n    const { unmark } = this.props;\n    const { markState } = this.state;\n    if (\n      markState === MarkStates.Marked &&\n      prevProps.numOfAdjacentBombs < 0 &&\n      this.isOpen()\n    ) {\n      unmark();\n    }\n  }\n\n  displayOpen = () => {\n    const { isBomb, numOfAdjacentBombs, gamePhase } = this.props;\n    return isBomb\n      ? gamePhase === GamePhase.Win\n        ? \"✅\"\n        : \"💣\"\n      : numOfAdjacentBombs > 0\n      ? numOfAdjacentBombs\n      : \"\";\n  };\n\n  displayHidden = () => {\n    const { markState } = this.state;\n    switch (markState) {\n      case MarkStates.Marked:\n        return \"🏳️‍⚧️\";\n      case MarkStates.QuestionMark:\n        return \"?\";\n      default:\n        return \"\";\n    }\n  };\n\n  handleRightClick = (e: React.MouseEvent) => {\n    const { mark, unmark } = this.props;\n    const { markState } = this.state;\n\n    e.preventDefault();\n    if (!this.isOpen()) {\n      if (markState === MarkStates.Unmarked) {\n        mark();\n      }\n      if (markState === MarkStates.Marked) {\n        unmark();\n      }\n      this.setState(\n        { markState: (markState + 1) % 3 } //Hardcore discrete math\n      );\n    }\n  };\n\n  handleOpen = (row: number, col: number) => {\n    const { bombsSquaresMat, lose, openSquares } = this.props;\n\n    if (bombsSquaresMat[row][col]) {\n      // if hit a bomb, handle lose\n      lose();\n      return;\n    }\n\n    openSquares(row, col);\n  };\n\n  handleLeftClick = () => {\n    const { gamePhase, firstMove, loc } = this.props;\n    const row = loc[0];\n    const col = loc[1];\n    if (gamePhase === GamePhase.FirstClick) {\n      firstMove(row, col);\n    }\n    this.handleOpen(row, col);\n  };\n\n  isOpen = () => {\n    const { numOfAdjacentBombs } = this.props;\n    return numOfAdjacentBombs > -1;\n  };\n\n  shouldDisplayOpen = () => {\n    const { gamePhase } = this.props;\n    return isGameOver(gamePhase) || this.isOpen();\n  };\n\n  buildSquareClassNameString = () => {\n    const { isBomb, gamePhase } = this.props;\n\n    return classNames(\"square\", {\n      open: this.isOpen(),\n      bomb: gamePhase === GamePhase.Lose && isBomb,\n      \"game-win\": gamePhase === GamePhase.Win,\n    });\n  };\n\n  render() {\n    const { markState } = this.state;\n    const { gamePhase } = this.props;\n    return (\n      <button\n        className={this.buildSquareClassNameString()}\n        onContextMenu={this.handleRightClick}\n        disabled={\n          gamePhase > GamePhase.Playing || markState === MarkStates.Marked\n        }\n        onClick={this.handleLeftClick}\n      >\n        {this.shouldDisplayOpen() ? this.displayOpen() : this.displayHidden()}\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState, ownProps: OwnProps) => {\n  const { loc } = ownProps;\n  return {\n    isBomb: state.bombsSquares[loc[0]][loc[1]],\n    numOfAdjacentBombs: state.openSquares[loc[0]][loc[1]],\n    gamePhase: state.gamePhase,\n    bombsSquaresMat: state.bombsSquares,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  unmark: () => dispatch(unMarkSquare()),\n  mark: () => dispatch(markSquare()),\n  firstMove: (row: number, col: number) => dispatch(firstMove(row, col)),\n  lose: () => dispatch(loseGame()),\n  openSquares: (row: number, col: number) => dispatch(openSquares(row, col)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(Square);\n","import Square from \"./Square\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RootState } from \"../store/store-types\";\nimport React from \"react\";\n\ntype GameProps = ConnectedProps<typeof connector>;\n\nconst Game: React.FC<GameProps> = (props) => {\n  return (\n    <div className=\"grid-container\">\n      {Array.from(Array(props.gameSize).keys()).map((i) => (\n        <div className=\"square-column\" key={i}>\n          {Array.from(Array(props.gameSize).keys()).map((j) => {\n            return <Square key={j} loc={[i, j]} />;\n          })}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    gameSize: state.gameSize,\n  };\n};\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(Game);\n","import React from \"react\";\nimport \"./App.css\";\nimport BombsCounter from \"./components/BombsCounter\";\nimport Timer from \"./components/Timer\";\nimport Game from \"./components/Game\";\n\ninterface AppProps {}\n\nconst App: React.FC<AppProps> = () => {\n  return (\n    <div className=\"app-container\">\n      <h1>MineSweeper Game</h1>\n      <div className=\"game-container\">\n        <BombsCounter />\n        <Game />\n        <Timer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nimport {\n  ActionTypes,\n  FirstMoveAction,\n  GamePhaseAction,\n  MarkAction,\n  OpenSquaresAction,\n} from \"../actions\";\nimport {\n  initBombsMatrix,\n  initBooleanMatrix,\n  initOpenSquaresMatrix,\n} from \"../../utils\";\nimport { GAME_SIZE, NUM_OF_BOMBS } from \"../../constants\";\nimport { GamePhase } from \"../store-types\";\n\nconst bombsLeft = (bombsLeft: number = NUM_OF_BOMBS, action: MarkAction) => {\n  switch (action.type) {\n    case ActionTypes.MarkSquare:\n      return bombsLeft - 1;\n    case ActionTypes.UnmarkSquare:\n      return bombsLeft + 1;\n    default:\n      return bombsLeft;\n  }\n};\n\nconst gameSize = (gameSize: number = GAME_SIZE) => gameSize;\n\nconst gamePhase = (\n  gamePhase: GamePhase = GamePhase.FirstClick,\n  action: GamePhaseAction | FirstMoveAction\n) => {\n  switch (action.type) {\n    case ActionTypes.FirstMove:\n      return GamePhase.Playing;\n    case ActionTypes.LoseGame:\n      return GamePhase.Lose;\n    case ActionTypes.WinGame:\n      return GamePhase.Win;\n    default:\n      return gamePhase;\n  }\n};\n\nconst bombsSquares = (\n  bombsSquares: boolean[][] = initBooleanMatrix(GAME_SIZE),\n  action: FirstMoveAction\n) => {\n  switch (action.type) {\n    case ActionTypes.FirstMove:\n      return initBombsMatrix(\n        GAME_SIZE,\n        NUM_OF_BOMBS,\n        action.payload.row,\n        action.payload.col\n      );\n    default:\n      return bombsSquares;\n  }\n};\n\nconst openSquares = (\n  openSquares: number[][] = initOpenSquaresMatrix(GAME_SIZE),\n  action: OpenSquaresAction\n) => {\n  switch (action.type) {\n    case ActionTypes.OpenSquares:\n      return action.payload.openSquares;\n    default:\n      return openSquares;\n  }\n};\n\nexport default combineReducers({\n  bombsLeft,\n  gameSize,\n  gamePhase,\n  bombsSquares,\n  openSquares,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport reducers from \"./store/reducers\";\nimport thunk from \"redux-thunk\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(reducers, applyMiddleware(thunk))}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}